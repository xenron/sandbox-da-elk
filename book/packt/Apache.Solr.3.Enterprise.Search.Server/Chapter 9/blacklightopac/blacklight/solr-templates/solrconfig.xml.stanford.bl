<?xml version="1.0" encoding="UTF-8" ?>
<config>
  <!-- Set this to 'false' if you want solr to continue working after it has 
       encountered an severe configuration error.  In a production environment, 
       you may want solr to keep working even if one handler is mis-configured.

       You may also set this to false using by setting the system property:
         -Dsolr.abortOnConfigurationError=false
     -->
  <abortOnConfigurationError>${solr.abortOnConfigurationError:true}</abortOnConfigurationError>

  <!-- Used to specify an alternate directory to hold all index data
       other than the default ./data under the Solr home.
       If replication is in use, this should match the replication configuration. -->
  <dataDir>${solr.data.dir:./solr/data}</dataDir>

  <indexDefaults>
   <!-- Values here affect all index writers and act as a default unless overridden. -->
    <useCompoundFile>false</useCompoundFile>
    <mergeFactor>20</mergeFactor>
    <!--
      If both ramBufferSizeMB and maxBufferedDocs is set, then Lucene will flush based on whichever limit is hit first.
    -->
    <!--<maxBufferedDocs>1000</maxBufferedDocs>-->
    <!-- Tell Lucene when to flush documents to disk.
      Giving Lucene more memory for indexing means faster indexing at the cost of more RAM
    -->
    <ramBufferSizeMB>10240</ramBufferSizeMB>
    <maxMergeDocs>2147483647</maxMergeDocs>
    <writeLockTimeout>1000</writeLockTimeout>
    <commitLockTimeout>10000</commitLockTimeout>
    
    <!--
      Expert: Turn on Lucene's auto commit capability.
      NOTE: Despite the name, this value does not have any relation to Solr's autoCommit functionality
    -->
    <!--<luceneAutoCommit>false</luceneAutoCommit>-->
    <!--
      Expert:
      The Merge Policy in Lucene controls how merging is handled by Lucene.        
      LogByteSizeMergePolicy chooses segments to merge based on their size.  
			LogDocMergePolicy choose segments to merge based on number of documents
			The default in 2.3 is the LogByteSizeMergePolicy
    -->
    <!--<mergePolicy>org.apache.lucene.index.LogByteSizeMergePolicy</mergePolicy>-->
    <!--
      Expert:
      The Merge Scheduler in Lucene controls how merges are performed.  The ConcurrentMergeScheduler (Lucene 2.3 default)
      can perform merges in the background using separate threads.  The SerialMergeScheduler does not.
    -->
    <!--<mergeScheduler>org.apache.lucene.index.ConcurrentMergeScheduler</mergeScheduler>-->
    
    <!--
      As long as Solr is the only process modifying your index, it is
      safe to use Lucene's in process locking mechanism.  But you may
      specify one of the other Lucene LockFactory implementations in
      the event that you have a custom situation.
      
      none = NoLockFactory (typically only used with read only indexes)
      single = SingleInstanceLockFactory (suggested)
      native = NativeFSLockFactory
      simple = SimpleFSLockFactory  (default for backwards compatibility with Solr 1.2)
    -->
    <lockType>single</lockType>
  </indexDefaults>

  <mainIndex>
    <!-- options specific to the main on-disk lucene index -->
    <useCompoundFile>false</useCompoundFile>
    <ramBufferSizeMB>10240</ramBufferSizeMB>
    <mergeFactor>20</mergeFactor>
    <maxMergeDocs>2147483647</maxMergeDocs>
    <maxFieldLength>10000</maxFieldLength>

    <!-- If true, unlock any held write or commit locks on startup. 
         This defeats the locking mechanism that allows multiple
         processes to safely access a lucene index, and should be
         used with care.
         This is not needed if lock type is 'none' or 'single'
     -->
    <unlockOnStartup>false</unlockOnStartup>

    <!--
        Custom deletion policies can specified here. The class must
        implement org.apache.lucene.index.IndexDeletionPolicy.

        http://lucene.apache.org/java/2_3_2/api/org/apache/lucene/index/IndexDeletionPolicy.html

        The standard Solr IndexDeletionPolicy implementation supports deleting
        index commit points on number of commits, age of commit point and
        optimized status.

        The latest commit point should always be preserved regardless
        of the criteria.
    -->
    <deletionPolicy class="solr.SolrDeletionPolicy">
      <!-- Keep only optimized commit points -->
      <str name="keepOptimizedOnly">false</str>
      <!-- The maximum number of commit points to be kept -->
      <str name="maxCommitsToKeep">1</str>
      <!--
          Delete all commit points once they have reached the given age.
          Supports DateMathParser syntax e.g.
          
          <str name="maxCommitAge">30MINUTES</str>
          <str name="maxCommitAge">1DAY</str>
      -->
    </deletionPolicy>

  </mainIndex>

  <!--	Enables JMX if and only if an existing MBeanServer is found, use 
  		this if you want to configure JMX through JVM parameters. Remove
  		this to disable exposing Solr configuration and statistics to JMX.

		If you want to connect to a particular server, specify the agentId
		e.g. <jmx agentId="myAgent" />

		If you want to start a new MBeanServer, specify the serviceUrl
		e.g <jmx serviceUrl="service:jmx:rmi:///jndi/rmi://localhost:9999/solr" />

		For more details see http://wiki.apache.org/solr/SolrJmx
  -->
  <jmx />

  <!-- the default high-performance update handler -->
  <updateHandler class="solr.DirectUpdateHandler2">

    <!-- Perform a <commit/> automatically under certain conditions:
         maxDocs - number of updates since last commit is greater than this
         maxTime - oldest uncommited update (in ms) is this long ago
    <autoCommit> 
      <maxDocs>10000</maxDocs>
      <maxTime>1000</maxTime> 
    </autoCommit>
    -->

    <!-- The RunExecutableListener executes an external command.
         exe - the name of the executable to run
         dir - dir to use as the current working directory. default="."
         wait - the calling thread waits until the executable returns. default="true"
         args - the arguments to pass to the program.  default=nothing
         env - environment variables to set.  default=nothing
      -->
    <!-- A postCommit event is fired after every commit or optimize command
    <listener event="postCommit" class="solr.RunExecutableListener">
      <str name="exe">solr/bin/snapshooter</str>
      <str name="dir">.</str>
      <bool name="wait">true</bool>
      <arr name="args"> <str>arg1</str> <str>arg2</str> </arr>
      <arr name="env"> <str>MYVAR=val1</str> </arr>
    </listener>
    -->
    <!-- A postOptimize event is fired only after every optimize command, useful
         in conjunction with index distribution to only distribute optimized indicies 
    <listener event="postOptimize" class="solr.RunExecutableListener">
      <str name="exe">snapshooter</str>
      <str name="dir">solr/bin</str>
      <bool name="wait">true</bool>
    </listener>
    -->

  </updateHandler>


  <query>
    <!-- Maximum number of clauses in a boolean query... can affect
        range or prefix queries that expand to big boolean
        queries.  An exception is thrown if exceeded.  -->
    <maxBooleanClauses>1024</maxBooleanClauses>

    
    <!-- There are two implementations of cache available for Solr,
         LRUCache, based on a synchronized LinkedHashMap, and
         FastLRUCache, based on a ConcurrentHashMap.  FastLRUCache has faster gets
         and slower puts in single threaded operation and thus is generally faster
         than LRUCache when the hit ratio of the cache is high (> 75%), and may be
         faster under other scenarios on multi-cpu systems. -->

    <!-- filterCache: Cache used by SolrIndexSearcher for filters (DocSets),
         unordered sets of *all* documents that match a query.
         When a new searcher is opened, its caches may be prepopulated
         or "autowarmed" using data from caches in the old searcher.
         autowarmCount is the number of items to prepopulate.  For LRUCache,
         the autowarmed items will be the most recently accessed items.
       Parameters:
         class - the SolrCache implementation LRUCache or FastLRUCache
         size - the maximum number of entries in the cache
         initialSize - the initial capacity (number of entries) of
           the cache.  (seel java.util.HashMap)
         autowarmCount - the number of entries to prepopulate from
           and old cache.
         -->
 <!-- not clear if we ever do a live update via SOLR ... so will we ever have
 an opportunity to autowarm -->
    <filterCache
      class="solr.LRUCache"
      size="100000"
      initialSize="100000"
      autowarmCount="50000"/>

    <!-- Cache used to hold field values that are quickly accessible
         by document id.  The fieldValueCache is created by default
         even if not configured here.
      <fieldValueCache
        class="solr.FastLRUCache"
        size="512"
        autowarmCount="128"
        showItems="32"
      />
    -->

   <!-- queryResultCache caches results of searches - ordered lists of
         document ids (DocList) based on a query, a sort, and the range
         of documents requested.
  -->
<!-- TODO: dial this way down once code uses filter queries for facets -->
    <queryResultCache
      class="solr.LRUCache"
      size="100000"
      initialSize="5000"
      autowarmCount="5000"/>

  <!-- documentCache caches Lucene Document objects (the stored fields for each document).
       Since Lucene internal document ids are transient, this cache will not be autowarmed.  -->
    <documentCache
      class="solr.LRUCache"
      size="50000"
      initialSize="50000"
      autowarmCount="10000"/>

    <!-- If true, stored fields that are not requested will be loaded lazily.

    This can result in a significant speed improvement if the usual case is to
    not load all stored fields, especially if the skipped fields are large compressed
    text fields.
    -->
    <enableLazyFieldLoading>true</enableLazyFieldLoading>

   <!-- An optimization that attempts to use a filter to satisfy a search.
         If the requested sort does not include score, then the filterCache
         will be checked for a filter matching the query. If found, the filter
         will be used as the source of document ids, and then the sort will be
         applied to that.  -->
    <useFilterForSortedQuery>true</useFilterForSortedQuery>

   <!-- An optimization for use with the queryResultCache.  When a search
         is requested, a superset of the requested number of document ids
         are collected.  For example, if a search for a particular query
         requests matching documents 10 through 19, and queryWindowSize is 50,
         then documents 0 through 50 will be collected and cached.  Any further
         requests in that range can be satisfied via the cache.  -->
    <queryResultWindowSize>60</queryResultWindowSize>
    
    <!-- Maximum number of documents to cache for any entry in the
      queryResultCache. -->
    <queryResultMaxDocsCached>100</queryResultMaxDocsCached>

    <!-- This entry enables an int hash representation for filters (DocSets)
         when the number of items in the set is less than maxSize.  For smaller
         sets, this representation is more memory efficient, more efficient to
         iterate over, and faster to take intersections.  -->
    <HashDocSet maxSize="200000" loadFactor="0.75"/>

<!-- not clear if we ever do a live update via SOLR ... so will we ever have
 a new searche?  Or always a first searcher?  -->
    <!-- a newSearcher event is fired whenever a new searcher is being prepared
         and there is a current searcher handling requests (aka registered). -->
    <!-- QuerySenderListener takes an array of NamedList and executes a
         local query request for each NamedList in sequence. -->
    <listener event="newSearcher" class="solr.QuerySenderListener">
      <arr name="queries">
      	<!-- single object query to populate filter cache -->
        <lst>
          <str name="q">id:666</str>
          <str name="rows">0</str>
          <str name="fl">score</str>
          <str name="facet">true</str>
          <str name="facet.mincount">1</str>
          <str name="facet.limit">30</str>
          <str name="facet.field">access_facet</str>
          <str name="facet.field">author_person_facet</str>
          <str name="facet.field">author_corp_facet</str>
          <str name="facet.field">author_meeting_facet</str>
          <str name="facet.field">author_combined_facet</str>
   	      <str name="facet.field">building_facet</str>
          <str name="facet.field">dewey_1digit_facet</str>
          <str name="facet.field">era_facet</str>
          <str name="facet.field">format_facet</str>
          <str name="facet.field">geographic_facet</str>
          <str name="facet.field">language_facet</str>
          <str name="facet.field">lc_1letter_facet</str>
          <str name="facet.field">topic_facet</str>
        </lst>
        <!-- default query for all objects, front page facets -->
        <lst>
          <str name="q">collection:Catalog</str>
          <str name="rows">0</str> 
          <str name="fl">score</str>
          <str name="facet">true</str>
          <str name="facet.mincount">1</str>
          <str name="facet.limit">30</str>
          <str name="facet.field">access_facet</str>
          <str name="facet.field">building_facet</str>
          <str name="facet.field">format_facet</str>
          <str name="facet.field">language_facet</str>
          <str name="facet.field">lc_1letter_facet</str>
          <str name="f.lc_1letter_facet.facet.sort">false</str>
          <str name="facet.field">dewey_1digit_facet</str>
          <str name="f.dewey_1digit_facet.facet.sort">false</str>
        </lst>
      </arr>
    </listener>
    -->

    <!-- a firstSearcher event is fired whenever a new searcher is being
         prepared but there is no current registered searcher to handle
         requests or to gain autowarming data from. -->
    <listener event="firstSearcher" class="solr.QuerySenderListener">
      <arr name="queries">
      	<!-- single object query to populate filter cache -->
        <lst> 
          <str name="q">id:666</str>
          <str name="rows">20</str>
          <str name="fl">score</str>
          <str name="facet">true</str>
          <str name="facet.mincount">1</str>
          <str name="facet.limit">30</str>
          <str name="facet.field">access_facet</str>
          <str name="facet.field">author_person_facet</str>
          <str name="facet.field">author_corp_facet</str>
          <str name="facet.field">author_meeting_facet</str>
          <str name="facet.field">author_combined_facet</str>
          <str name="facet.field">building_facet</str>
          <str name="facet.field">dewey_1digit_facet</str>
          <str name="facet.field">era_facet</str>
          <str name="facet.field">format_facet</str>
          <str name="facet.field">geographic_facet</str>
          <str name="facet.field">language_facet</str>
          <str name="facet.field">lc_1letter_facet</str>
          <str name="facet.field">topic_facet</str>
        </lst>
        <!-- default query for all objects, front page facets -->
        <lst>
          <str name="q">collection:Catalog</str>
          <str name="rows">0</str> 
          <str name="fl">score</str>
          <str name="facet">true</str>
          <str name="facet.mincount">1</str>
          <str name="facet.limit">30</str>
          <str name="facet.field">access_facet</str>
          <str name="facet.field">building_facet</str>
          <str name="facet.field">format_facet</str>
          <str name="facet.field">language_facet</str>
          <str name="facet.field">lc_1letter_facet</str>
          <str name="f.lc_1letter_facet.facet.sort">false</str>
          <str name="facet.field">dewey_1digit_facet</str>
          <str name="f.dewey_1digit_facet.facet.sort">false</str>
        </lst>
      </arr>
    </listener>
    
    <!-- If a search request comes in and there is no current registered searcher,
      then immediately register the still warming searcher and use it.  If
      "false" then all requests will block until the first searcher is done
      warming. -->
    <useColdSearcher>false</useColdSearcher>
    
    <!-- Maximum number of searchers that may be warming in the background
      concurrently.  An error is returned if this limit is exceeded. Recommend
      1-2 for read-only slaves, higher for masters w/o cache warming. -->
    <maxWarmingSearchers>2</maxWarmingSearchers>

  </query>

  <!-- 
    Let the dispatch filter handler /select?qt=XXX
    handleSelect=true will use consistent error handling for /select and /update
    handleSelect=false will use solr1.1 style error formatting
  -->
  <requestDispatcher handleSelect="true" >
    <!--Make sure your system has some authentication before enabling remote streaming!  -->
    <requestParsers enableRemoteStreaming="false" multipartUploadLimitInKB="2048" />

    <!-- Set HTTP caching related parameters (for proxy caches and clients).
          
         To get the behaviour of Solr 1.2 (ie: no caching related headers)
         use the never304="true" option and do not specify a value for
         <cacheControl>
    -->
    <!-- <httpCaching never304="true"> -->
    <httpCaching lastModifiedFrom="openTime"
                 etagSeed="Solr">
       <!-- lastModFrom="openTime" is the default, the Last-Modified value
            (and validation against If-Modified-Since requests) will all be
            relative to when the current Searcher was opened.
            You can change it to lastModFrom="dirLastMod" if you want the
            value to exactly corrispond to when the physical index was last
            modified.

            etagSeed="..." is an option you can change to force the ETag
            header (and validation against If-None-Match requests) to be
            differnet even if the index has not changed (ie: when making
            significant changes to your config file)

            lastModifiedFrom and etagSeed are both ignored if you use the
            never304="true" option.
       -->
       <!-- If you include a <cacheControl> directive, it will be used to
            generate a Cache-Control header, as well as an Expires header
            if the value contains "max-age="

            By default, no Cache-Control header is generated.

            You can use the <cacheControl> option even if you have set
            never304="true"
       -->
       <!-- <cacheControl>max-age=30, public</cacheControl> -->
    </httpCaching>
  </requestDispatcher>

   <!-- The spell check search component can return a list of alternative 
        spelling suggestions.  -->
  <searchComponent name="spellcheck" class="solr.SpellCheckComponent">
    <str name="queryAnalyzerFieldType">textSpell</str>

    <lst name="spellchecker">
      <str name="name">default</str>
      <str name="field">spell</str>
      <str name="spellcheckIndexDir">./spellchecker</str>
			<str name="accuracy">0.7</str>
    </lst>
    <lst name="spellchecker">
      <str name="name">jarowinkler</str>
      <str name="field">spell</str>
      <!-- Use a different Distance Measure -->
      <str name="distanceMeasure">org.apache.lucene.search.spell.JaroWinklerDistance</str>
      <str name="spellcheckIndexDir">./spellcheckerJaroWin</str>
    </lst>

    <lst name="spellchecker">
      <str name="classname">solr.FileBasedSpellChecker</str>
      <str name="name">file</str>
      <str name="sourceLocation">spellings.txt</str>
      <str name="characterEncoding">UTF-8</str>
      <str name="spellcheckIndexDir">./spellcheckerFile</str>
    </lst>

    <str name="queryAnalyzerFieldType">textSpell</str>
  </searchComponent>


  <!-- requestHandler plugins... incoming queries will be dispatched to the
     correct handler based on the path or the qt (query type) param.
     Names starting with a '/' are accessed with the a path equal to the 
     registered name.  Names without a leading '/' are accessed with:
      http://host/app/select?qt=name
     If no qt is defined, the requestHandler that declares default="true"
     will be used.
  -->
  <requestHandler name="standard" class="solr.SearchHandler" >
    <!-- default values for query parameters -->
     <lst name="defaults">
       <str name="echoParams">explicit</str>
       <str name="rows">20</str>  <!-- change for record view -->
       <!-- fl:  fields needed for search results -->
       <str name="fl">
         score,
         id,
         author_corp_display,
         author_meeting_display,
         author_person_display,
         author_person_full_display,
         format_display,
         edition_display,
         isbn_display,
         lccn_display,
         oclc_display,
         physical_display,
         publication_display,
         publish_date_display,
         title_display,
         title_245a_display,
         title_uniform_display,
         url_display,
         url_sfx_display,
         vern_author_corp_display,
         vern_author_meeting_display,
         vern_author_person_display,
         vern_author_person_full_display,
         vern_edition_display,
         vern_publication_display
         vern_title_display,
         vern_title_uniform_display,
       </str>

       <!-- facet config, enable per-query with facet=true -->
       <str name="facet.mincount">1</str>
       <str name="facet.limit">30</str>
       <str name="facet.field">access_facet</str>
  	   <str name="facet.field">author_person_facet</str>
  	   <str name="facet.field">author_corp_facet</str>
  	   <str name="facet.field">author_meeting_facet</str>
  	   <str name="facet.field">author_combined_facet</str>
       <str name="facet.field">building_facet</str>
       <str name="facet.field">dewey_1digit_facet</str>
       <str name="facet.field">era_facet</str>
       <str name="facet.field">format_facet</str>
       <str name="facet.field">geographic_facet</str>
       <str name="facet.field">language_facet</str>
       <str name="facet.field">lc_1letter_facet</str>
       <str name="facet.field">topic_facet</str>

      <!-- highlighter config, enable per-query with hl=true -->
<!-- TODO: revisit highlighter config when fulltext avail -->
      <str name="hl.fl">
        author_person_display
        vern_author_person_display
        author_person_full_display
        vern_author_person_full_display
        author_corp_display
        vern_author_corp_display
        author_meeting_display
        vern_author_meeting_display
        publication_display
        vern_publication_display
        title_display 
        vern_title_display
        title_uniform_display
        vern_title_uniform_display
      </str>
      <!-- no fragmenting, just highlighting -->
      <str name="hl.fragsize">0</str>
      <str name="hl.snippets">0</str> 
      <str name="f.text.hl.fragmenter">regex</str> <!-- defined below -->
      
      <!-- spellcheck config, enable per-query with spellcheck=true -->
      <str name="spellcheck.onlyMorePopular">true</str>
      <str name="spellcheck.extendedResults">true</str>
      <str name="spellcheck.collate">true</str>
      <str name="spellcheck.count">1</str>
    </lst>
    <arr name="last-components">
      <str>spellcheck</str>
    </arr>


  </requestHandler>

<!-- Please refer to http://wiki.apache.org/solr/SolrReplication for details on configuring replication -->
<!--Master config-->
<!--
  <requestHandler name="/replication" class="solr.ReplicationHandler" >
    <lst name="master">
        <str name="replicateAfter">commit</str>
        <str name="confFiles">schema.xml,stopwords.txt</str>
    </lst>
  </requestHandler>
-->
<!-- Slave config-->
<!--
  <requestHandler name="/replication" class="solr.ReplicationHandler">
    <lst name="slave">
      <str name="masterUrl">http://localhost:8983/solr/replication</str>
      <str name="pollInterval">00:00:60</str>  
    </lst>
  </requestHandler>
-->

  <!-- DisMaxRequestHandler allows easy searching across multiple fields
       for simple user-entered phrases.  Its implementation is now
       just the standard SearchHandler with a default query type
       of "dismax". 
       see http://wiki.apache.org/solr/DisMaxRequestHandler
   -->

	<!-- handler for search requests -->
  <requestHandler name="search" class="solr.SearchHandler" default="true">
    <lst name="defaults">
      <str name="defType">dismax</str>
      <str name="echoParams">explicit</str>
      <float name="tie">0.01</float>
      <str name="qf">
<!--
https://consul.stanford.edu/display/NGDE/relevancyRanking
-->
<!-- TODO:  add vernacular fields -->        
        title_245a_search^37500
        title_search^30000
        title_addl_search^2500
        topic_search^750
        author_person_facet^700
        geographic_search^300
        series_search^50
        title_old_search^50
        title_new_search^50
        author_person_search^50
        topic_full_search^30
        geographic_full_search^30
        era_search^30
        series_addl_search^30
        toc_search^10
        physical_search^10
        publish_date_search^10
        author_corp_search^2
        author_meeting_search^2
        all_search
        isbn_search
        issn_search
        id
      </str>
      <!-- pf: Phrase Fields.  After set of matching docs determined (from fq 
        and qf), pf can be used to "boost" the score of documents in cases where
        all of the terms in the "q" param appear in close proximity.
       -->
      <str name="pf">
<!-- TODO: add vernacular fields -->
        title_search^625
        title_245a_search^500
        topic_search^15
        author_person_search^10
        geographic_search^5
        title_addl_search
        author_corp_search
        author_meeting_search
        topic_full_search
        geographic_full_search
        era_search
        series_search
        series_addl_search
        title_old_search
        title_new_search
        toc_search
        all_search
      </str>
      
      <!-- fl:  fields needed for search results;  single records retrieved with
        "details" request handler -->
      <str name="fl">
        score,
        id,
        author_corp_display,
        author_meeting_display,
        author_person_display,
        author_person_full_display,
        format_display,
        edition_display,
        isbn_display,
        lccn_display,
        oclc_display,
        physical_display,
        publication_display,
        publish_date_display,
        title_display,
        title_245a_display,
        title_uniform_display,
        url_display,
        url_sfx_display,
        vern_author_corp_display,
        vern_author_meeting_display,
        vern_author_person_display,
        vern_author_person_full_display,
        vern_edition_display,
        vern_publication_display
        vern_title_display,
        vern_title_uniform_display,
      </str>
      
      <str name="facet">true</str>
      <str name="facet.mincount">1</str>
      <str name="facet.limit">30</str> 
      <str name="facet.field">access_facet</str>
  	  <str name="facet.field">author_person_facet</str>
  	  <str name="facet.field">author_corp_facet</str>
  	  <str name="facet.field">author_meeting_facet</str>
  	  <str name="facet.field">author_combined_facet</str>
      <str name="facet.field">building_facet</str>
      <str name="facet.field">dewey_1digit_facet</str>
      <str name="facet.field">era_facet</str>
      <str name="facet.field">format_facet</str>
      <str name="facet.field">geographic_facet</str>
      <str name="facet.field">language_facet</str>
      <str name="facet.field">lc_1letter_facet</str>
      <str name="facet.field">topic_facet</str>
      
      <str name="mm">
        2&lt;-1 5&lt;-2 6&lt;90%
      </str>
      <int name="ps">100</int>
      <str name="q.alt">*:*</str>

      <!-- highlighter config, enable per-query with hl=true -->
<!-- TODO: revisit highlighter config when fulltext avail -->
      <str name="hl.fl">
        author_person_display
        vern_author_person_display
        author_person_full_display
        vern_author_person_full_display
        author_corp_display
        vern_author_corp_display
        author_meeting_display
        vern_author_meeting_display
        publication_display
        vern_publication_display
        title_display 
        vern_title_display
        title_uniform_display
        vern_title_uniform_display
      </str>
      <!-- no fragmenting, just highlighting -->
      <str name="hl.fragsize">0</str>
      <str name="hl.snippets">0</str> 
      <str name="f.text.hl.fragmenter">regex</str> <!-- defined below -->
      
      <!-- spellcheck config, enable per-query with spellcheck=true -->
      <str name="spellcheck.onlyMorePopular">true</str>
      <str name="spellcheck.extendedResults">true</str>
      <str name="spellcheck.collate">true</str>
      <str name="spellcheck.count">1</str>
    </lst>
    <arr name="last-components">
      <str>spellcheck</str>
    </arr>
  </requestHandler>
  
  <!-- request handler for title searches -->  
  <requestHandler name="search_title" class="solr.SearchHandler" >
    <lst name="defaults">
      <str name="defType">dismax</str>
      <str name="echoParams">explicit</str>
      <float name="tie">0.01</float>
      <str name="qf">
<!-- TODO:  add vernacular title search fields --> 
        title_245a_search^2500
        title_search^2000
        title_addl_search^100
        title_old_search^2
        title_new_search^2
        series_search
        series_addl_search
      </str>
      <str name="pf">
<!-- TODO: add vernacular title search fields -->
        title_search^20000
        title_245a_search^1500
        title_addl_search
        series_search^2
        series_addl_search
        title_old_search
        title_new_search
      </str>
      
      <!-- fl:  fields needed for search results;  single records retrieved with
        "details" request handler -->
      <str name="fl">
        score,
        id,
        author_corp_display,
        author_meeting_display,
        author_person_display,
        author_person_full_display,
        format_display,
        edition_display,
        isbn_display,
        lccn_display,
        oclc_display,
        physical_display,
        publication_display,
        publish_date_display,
        title_display,
        title_245a_display,
        title_uniform_display,
        url_display,
        url_sfx_display,
        vern_author_corp_display,
        vern_author_meeting_display,
        vern_author_person_display,
        vern_author_person_full_display,
        vern_edition_display,
        vern_publication_display
        vern_title_display,
        vern_title_uniform_display,
      </str>
      
      <str name="facet">true</str>
      <str name="facet.mincount">1</str>
      <str name="facet.limit">30</str>
      <str name="facet.field">access_facet</str>
  	  <str name="facet.field">author_person_facet</str>
  	  <str name="facet.field">author_corp_facet</str>
  	  <str name="facet.field">author_meeting_facet</str>
  	  <str name="facet.field">author_combined_facet</str>
      <str name="facet.field">building_facet</str>
      <str name="facet.field">dewey_1digit_facet</str>
      <str name="facet.field">era_facet</str>
      <str name="facet.field">format_facet</str>
      <str name="facet.field">geographic_facet</str>
      <str name="facet.field">language_facet</str>
      <str name="facet.field">lc_1letter_facet</str>
      <str name="facet.field">topic_facet</str>
      
      <str name="mm">
        2&lt;-1 5&lt;-2 6&lt;90%
      </str>
      <int name="ps">100</int>
      <str name="q.alt">*:*</str>

      <!-- highlighter config, enable per-query with hl=true -->
<!-- TODO: revisit highlighter config when fulltext avail -->
      <str name="hl.fl">
        title_display 
        vern_title_display
        title_uniform_display
        vern_title_uniform_display
      </str>
      <!-- no fragmenting, just highlighting -->
      <str name="hl.fragsize">0</str>
      <str name="hl.snippets">0</str> 
      <str name="f.text.hl.fragmenter">regex</str> <!-- defined below -->
      
      <!-- spellcheck config, enable per-query with spellcheck=true -->
      <str name="spellcheck.onlyMorePopular">true</str>
      <str name="spellcheck.extendedResults">true</str>
      <str name="spellcheck.collate">true</str>
      <str name="spellcheck.count">1</str>
    </lst>
    <arr name="last-components">
      <str>spellcheck</str>
    </arr>
  </requestHandler>
  
  
  <!-- request handler for author searches -->  
  <requestHandler name="search_author" class="solr.SearchHandler" >
    <lst name="defaults">
      <str name="defType">dismax</str>
      <str name="echoParams">explicit</str>
      <float name="tie">0.01</float>
      <str name="qf">
<!-- TODO:  add vernacular author search fields -->        
        author_person_facet^50
        author_corp_facet^5
        author_meeting_facet^5
        author_person_search^2
        author_corp_search
        author_meeting_search
      </str>
      <str name="pf">
<!-- TODO: add vernacular author search fields -->
        author_person_facet^3
        author_corp_facet^1.5
        author_meeting_facet^1.5
        author_person_search
        author_corp_search
        author_meeting_search
      </str>
      
      <!-- fl:  fields needed for search results;  single records retrieved with
        "details" request handler -->
      <str name="fl">
        score,
        id,
        author_corp_display,
        author_meeting_display,
        author_person_display,
        author_person_full_display,
        format_display,
        edition_display,
        isbn_display,
        lccn_display,
        oclc_display,
        physical_display,
        publication_display,
        publish_date_display,
        title_display,
        title_245a_display,
        title_uniform_display,
        url_display,
        url_sfx_display,
        vern_author_corp_display,
        vern_author_meeting_display,
        vern_author_person_display,
        vern_author_person_full_display,
        vern_edition_display,
        vern_publication_display
        vern_title_display,
        vern_title_uniform_display,
      </str>
      
      <str name="facet">true</str>
      <str name="facet.mincount">1</str>
      <str name="facet.limit">30</str> 
      <str name="facet.field">access_facet</str>
  	  <str name="facet.field">author_person_facet</str>
  	  <str name="facet.field">author_corp_facet</str>
  	  <str name="facet.field">author_meeting_facet</str>
  	  <str name="facet.field">author_combined_facet</str>
      <str name="facet.field">building_facet</str>
      <str name="facet.field">dewey_1digit_facet</str>
      <str name="facet.field">era_facet</str>
      <str name="facet.field">format_facet</str>
      <str name="facet.field">geographic_facet</str>
      <str name="facet.field">language_facet</str>
      <str name="facet.field">lc_1letter_facet</str>
      <str name="facet.field">topic_facet</str>
      
      <str name="mm">
        2&lt;-1 5&lt;-2 6&lt;90%
      </str>
      <int name="ps">100</int>
      <str name="q.alt">*:*</str>

      <!-- highlighter config, enable per-query with hl=true -->
<!-- TODO: revisit highlighter config when fulltext avail -->
      <str name="hl.fl">
        author_person_display
        vern_author_person_display
        author_person_full_display
        vern_author_person_full_display
        author_corp_display
        vern_author_corp_display
        author_meeting_display
        vern_author_meeting_display
      </str>
      <!-- no fragmenting, just highlighting -->
      <str name="hl.fragsize">0</str>
      <str name="hl.snippets">0</str> 
      <str name="f.text.hl.fragmenter">regex</str> <!-- defined below -->
      
      <!-- spellcheck config, enable per-query with spellcheck=true -->
      <str name="spellcheck.onlyMorePopular">true</str>
      <str name="spellcheck.extendedResults">true</str>
      <str name="spellcheck.collate">true</str>
      <str name="spellcheck.count">1</str>
    </lst>
    <arr name="last-components">
      <str>spellcheck</str>
    </arr>
  </requestHandler>
  
  <!-- request handler for subject searches -->  
  <requestHandler name="search_subject" class="solr.SearchHandler" >
    <lst name="defaults">
      <str name="defType">dismax</str>
      <str name="echoParams">explicit</str>
      <float name="tie">0.01</float>
      <str name="qf">
<!-- TODO:  add subject search field boost factors -->     
<!-- TODO:  add subject search vernacular fields -->     
        topic_search^5
        geographic_search^5
        topic_full_search^3
        geographic_full_search^3
        era_search
      </str>
      <!-- pf: Phrase Fields.  After set of matching docs determined (from fq 
        and qf), pf can be used to "boost" the score of documents in cases where
        all of the terms in the "q" param appear in close proximity.
      -->
      <str name="pf">
<!-- TODO:  add subject search vernacular fields -->        
        topic_search^5
        geographic_search^5
        topic_full_search^3
        geographic_full_search^3
        era_search^3
      </str>
      
      <str name="fl">
        score,
        id,
        author_corp_display,
        author_meeting_display,
        author_person_display,
        author_person_full_display,
        format_display,
        edition_display,
        isbn_display,
        lccn_display,
        oclc_display,
        physical_display,
        publication_display,
        publish_date_display,
        title_display,
        title_245a_display,
        title_uniform_display,
        url_display,
        url_sfx_display,
        vern_author_corp_display,
        vern_author_meeting_display,
        vern_author_person_display,
        vern_author_person_full_display,
        vern_edition_display,
        vern_publication_display
        vern_title_display,
        vern_title_uniform_display,
      </str>
      
      <str name="facet">true</str>
      <str name="facet.mincount">1</str>
      <str name="facet.limit">30</str>
      <str name="facet.field">access_facet</str>
  	  <str name="facet.field">author_person_facet</str>
 	    <str name="facet.field">author_corp_facet</str>
 	    <str name="facet.field">author_meeting_facet</str>
 	    <str name="facet.field">author_combined_facet</str>
      <str name="facet.field">building_facet</str>
      <str name="facet.field">dewey_1digit_facet</str>
      <str name="facet.field">era_facet</str>
      <str name="facet.field">format_facet</str>
      <str name="facet.field">geographic_facet</str>
      <str name="facet.field">language_facet</str>
      <str name="facet.field">lc_1letter_facet</str>
      <str name="facet.field">topic_facet</str>
      
      <str name="mm">
        2&lt;-1 5&lt;-2 6&lt;90%
      </str>
      <int name="ps">100</int>
      <str name="q.alt">*:*</str>
      <!-- no highlighter stuff b/c subjects not shown in search results display -->
      
      <!-- spellcheck config, enable per-query with spellcheck=true -->
      <str name="spellcheck.onlyMorePopular">true</str>
      <str name="spellcheck.extendedResults">true</str>
      <str name="spellcheck.collate">true</str>
      <str name="spellcheck.count">1</str>
    </lst>
    <arr name="last-components">
      <str>spellcheck</str>
    </arr>
  </requestHandler>
  
  <!-- for requests to get a single document; use id=blah instead of q=id:blah -->
  <requestHandler name="document" class="solr.SearchHandler" >
    <lst name="defaults">
      <str name="echoParams">all</str>
      <str name="fl">*</str>
      <str name="rows">1</str>
      <str name="q">{!raw f=id v=$id}</str> <!-- use id=blah instead of q=id:blah -->
    </lst>
  </requestHandler>


  <!--
   Search components are registered to SolrCore and used by Search Handlers
   
   By default, the following components are avaliable:
    
   <searchComponent name="query"     class="org.apache.solr.handler.component.QueryComponent" />
   <searchComponent name="facet"     class="org.apache.solr.handler.component.FacetComponent" />
   <searchComponent name="mlt"       class="org.apache.solr.handler.component.MoreLikeThisComponent" />
   <searchComponent name="highlight" class="org.apache.solr.handler.component.HighlightComponent" />
   <searchComponent name="stats"     class="org.apache.solr.handler.component.StatsComponent" />
   <searchComponent name="debug"     class="org.apache.solr.handler.component.DebugComponent" />
   
   Default configuration in a requestHandler would look like:
    <arr name="components">
      <str>query</str>
      <str>facet</str>
      <str>mlt</str>
      <str>highlight</str>
      <str>stats</str>
      <str>debug</str>
    </arr>

    If you register a searchComponent to one of the standard names, that will be used instead.
    To insert components before or after the 'standard' components, use:
    
    <arr name="first-components">
      <str>myFirstComponentName</str>
    </arr>
    
    <arr name="last-components">
      <str>myLastComponentName</str>
    </arr>
  -->


<!--
  <requestHandler name="/update/extract" class="solr.ExtractingRequestHandler">
    <lst name="defaults">
      <str name="ext.map.Last-Modified">last_modified</str>
      <bool name="ext.ignore.und.fl">true</bool>
    </lst>
  </requestHandler>
-->

    <requestHandler name="/search" class="org.apache.solr.handler.component.SearchHandler" startup="lazy">
      <lst name="defaults">
        <str name="echoParams">explicit</str>
      </lst>
      <!--
        By default, this will register the following components:
        
        <arr name="components">
        <str>query</str>
        <str>facet</str>
        <str>mlt</str>
        <str>highlight</str>
        <str>debug</str>
        </arr>
        
        To insert handlers before or after the 'standard' components, use:
        
        <arr name="first-components">
        <str>first</str>
        </arr>
        
        <arr name="last-components">
        <str>last</str>
        </arr>
        
      -->
    </requestHandler>
    
    <searchComponent name="elevator" class="org.apache.solr.handler.component.QueryElevationComponent" startup="lazy">
      <!-- pick a fieldType to analyze queries -->
      <str name="queryFieldType">string</str>
      <str name="config-file">elevate.xml</str>
    </searchComponent>
    
    <requestHandler name="/elevate" class="org.apache.solr.handler.component.SearchHandler" startup="lazy">
      <lst name="defaults">
        <str name="echoParams">explicit</str>
      </lst>
      <arr name="last-components">
        <str>elevator</str>
      </arr>
    </requestHandler>
    

    <!-- Update request handler.  
      
      Note: Since solr1.1 requestHandlers requires a valid content type header if posted in 
      the body. For example, curl now requires: -H 'Content-type:text/xml; charset=utf-8'
      The response format differs from solr1.1 formatting and returns a standard error code.
      
      To enable solr1.1 behavior, remove the /update handler or change its path
    -->
    <requestHandler name="/update" class="solr.XmlUpdateRequestHandler" startup="lazy"/>
    
    <requestHandler name="/update/javabin" class="solr.BinaryUpdateRequestHandler" startup="lazy"/>
    
    <!--
      Analysis request handler.  Since Solr 1.3.  Use to returnhow a document is analyzed.  Useful
      for debugging and as a token server for other types of applications
    -->
    <requestHandler name="/analysis" class="solr.AnalysisRequestHandler" startup="lazy" />
    
    <!-- CSV update handler, loaded on demand -->
    <requestHandler name="/update/csv" class="solr.CSVRequestHandler" startup="lazy" />
    
    <!-- 
      Admin Handlers - This will register all the standard admin RequestHandlers.  Adding 
      this single handler is equivolent to registering:
      
      <requestHandler name="/admin/luke"       class="org.apache.solr.handler.admin.LukeRequestHandler" />
      <requestHandler name="/admin/system"     class="org.apache.solr.handler.admin.SystemInfoHandler" />
      <requestHandler name="/admin/plugins"    class="org.apache.solr.handler.admin.PluginInfoHandler" />
      <requestHandler name="/admin/threads"    class="org.apache.solr.handler.admin.ThreadDumpHandler" />
      <requestHandler name="/admin/properties" class="org.apache.solr.handler.admin.PropertiesRequestHandler" />
      <requestHandler name="/admin/file"       class="org.apache.solr.handler.admin.ShowFileRequestHandler" >
      
      If you wish to hide files under ${solr.home}/conf, explicitly register the ShowFileRequestHandler using:
      <requestHandler name="/admin/file" class="org.apache.solr.handler.admin.ShowFileRequestHandler" >
      <lst name="invariants">
      <str name="hidden">synonyms.txt</str> 
      <str name="hidden">anotherfile.txt</str> 
      </lst>
      </requestHandler>
    -->
    <requestHandler name="/admin/" class="org.apache.solr.handler.admin.AdminHandlers" />
    
    <!-- ping/healthcheck -->
    <requestHandler name="/admin/ping" class="PingRequestHandler">
      <lst name="defaults">
        <str name="qt">standard</str>
        <str name="q">solrpingquery</str>
        <str name="echoParams">all</str>
      </lst>
    </requestHandler>
    
    <!-- Echo the request contents back to the client -->
    <requestHandler name="/debug/dump" class="solr.DumpRequestHandler" >
      <lst name="defaults">
        <str name="echoParams">explicit</str> <!-- for all params (including the default etc) use: 'all' -->
        <str name="echoHandler">true</str>
      </lst>
    </requestHandler>
    
    <highlighting>
      <!-- Configure the standard fragmenter -->
      <!-- This could most likely be commented out in the "default" case -->
      <fragmenter name="gap" class="org.apache.solr.highlight.GapFragmenter" default="true">
        <lst name="defaults">
          <int name="hl.fragsize">100</int>
        </lst>
      </fragmenter>
      
      <!-- A regular-expression-based fragmenter (f.i., for sentence extraction) -->
      <fragmenter name="regex" class="org.apache.solr.highlight.RegexFragmenter">
        <lst name="defaults">
          <!-- slightly smaller fragsizes work better because of slop -->
          <int name="hl.fragsize">70</int>
          <!-- allow 50% slop on fragment sizes -->
          <float name="hl.regex.slop">0.5</float> 
          <!-- a basic sentence pattern -->
          <str name="hl.regex.pattern">[-\w ,/\n\"']{20,200}</str>
        </lst>
      </fragmenter>
      
      <!-- Configure the standard formatter -->
      <formatter name="html" class="org.apache.solr.highlight.HtmlFormatter" default="true">
        <lst name="defaults">
          <str name="hl.simple.pre"><![CDATA[<em>]]></str>
          <str name="hl.simple.post"><![CDATA[</em>]]></str>
        </lst>
      </formatter>
    </highlighting>
  
  <!-- queryResponseWriter plugins... query responses will be written using the
    writer specified by the 'wt' request parameter matching the name of a registered
    writer.
    The "standard" writer is the default and will be used if 'wt' is not specified 
    in the request. XMLResponseWriter will be used if nothing is specified here.
    The json, python, and ruby writers are also available by default.

    <queryResponseWriter name="standard" class="org.apache.solr.request.XMLResponseWriter"/>
    <queryResponseWriter name="json" class="org.apache.solr.request.JSONResponseWriter"/>
    <queryResponseWriter name="python" class="org.apache.solr.request.PythonResponseWriter"/>
    <queryResponseWriter name="ruby" class="org.apache.solr.request.RubyResponseWriter"/>

    <queryResponseWriter name="custom" class="com.example.MyResponseWriter"/>
  -->

    <queryResponseWriter name="standard" class="org.apache.solr.request.RubyResponseWriter"/>
  <!-- XSLT response writer transforms the XML output by any xslt file found
       in Solr's conf/xslt directory.  Changes to xslt files are checked for
       every xsltCacheLifetimeSeconds.  
   -->
  <queryResponseWriter name="xslt" class="org.apache.solr.request.XSLTResponseWriter">
     <int name="xsltCacheLifetimeSeconds">5</int>
   </queryResponseWriter> 
    
  <!-- config for the admin interface --> 
  <admin>
    <defaultQuery>id:666</defaultQuery>
    <gettableFiles>solrconfig.xml schema.xml admin-extra.html</gettableFiles>
    <pingQuery>q=id:666&amp;start=0&amp;rows=0</pingQuery>

    <!-- configure a healthcheck file for servers behind a loadbalancer
    <healthcheck type="file">server-enabled</healthcheck>
    -->
  </admin>

</config>
